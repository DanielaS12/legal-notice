plugins {
    id 'java'
    id 'io.spring.dependency-management' version '1.1.0'
    id "com.jfrog.artifactory" version "4.24.20"
    id "nebula.maven-publish" version "18.1.0"
    id 'com.palantir.git-version' version '0.12.3' apply false
}

version = project.getVersion()
sourceCompatibility = '11'
defaultTasks(":legal-notice-module:clean", ":legal-notice-module:build")
def artifactoryUser = project.hasProperty('artifactory_user') ? project.artifactory_user : System.getenv('ARTIFACTORY_USER') ?: ''
def artifactoryToken = project.hasProperty('artifactory_password') ? project.artifactory_password : System.getenv('ARTIFACTORY_TOKEN') ?: ''

repositories {
    mavenCentral()
    maven {
        url 'https://armory.jfrog.io/artifactory/gradle-dev'
        credentials {
            username = "${artifactory_user}"
            password = "${artifactory_password}"
        }
    }
}

dependencies {
    implementation 'org.springframework:spring-context:5.3.13'
    implementation "org.slf4j:slf4j-api:1.7.32"
}

String getFullVersion() {
    try {
        apply plugin: 'com.palantir.git-version'
        return gitVersion()
    } catch (Exception e) {
        project.logger.error(e.getMessage())
        return System.getProperty("version", "v0.0.0.dirty")
    }
}

version = normalizedVersion()

String normalizedVersion() {
    String fullVersion = getFullVersion()
    logger.lifecycle("full version: ${String.valueOf(fullVersion)}")
    String normalized = fullVersion.split("-").first()
    def resolvedVersion
    if (project.hasProperty('stage') && project.stage == "true") {
        resolvedVersion = "$normalized-stage.${new Date().getTime()}"
    } else if (fullVersion.contains("dirty")) {
        resolvedVersion = "$normalized-dev.${new Date().getTime()}"
    } else {
        resolvedVersion = fullVersion
    }
    logger.lifecycle("Resolved version: ${resolvedVersion}")
    return resolvedVersion
}

task printVersionNumber() {
    doLast {
        println("VERSION:" + project.getVersion())
    }
}


apply plugin: "com.jfrog.artifactory"
artifactory {
    publish {
        contextUrl = 'https://armory.jfrog.io/armory'
        repository {
            repoKey = 'gradle-dev-local'
            username = artifactoryUser
            password = artifactoryToken
        }
        defaults {
            publications 'nebula'
        }
    }

}


tasks.artifactoryPublish.dependsOn 'printVersion'



